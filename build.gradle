buildscript {
    repositories {
        jcenter()
        maven {
            name = 'Forge'
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = 'Sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            name = 'Jitpack.io'
            url = 'https://jitpack.io'
        }
        maven {
            name = 'Maven'
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

repositories {
    maven {
        name = "Sponge"
        url = "https://repo.spongepowered.org/maven/"
    }
    maven {
        name = 'bStats'
        //Updated to new repo for bStats
        url = 'https://repo.codemc.org/repository/maven-public'
    }
    maven {
        name = 'Jitpack.io'
        url = 'https://jitpack.io'
    }

    maven
    {
        name = 'griefdefender'
        url = 'https://repo.glaremasters.me/repository/bloodshot'
    }
}

ext.GetCommitCount = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', '--all', '--count'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

boolean isFat = hasProperty("isFat")
boolean installIntoServer = hasProperty("installIntoServer")
boolean isObfuscated = project.gradle.startParameter.taskNames.contains("build")

String buildType = (isFat ? "FAT" : "THIN")
String version_file = "./build/last_version.txt"
String last_file_name = "./build/last_file_name.txt"
String last_file_path = "./build/last_file_path.txt"

if(project.gradle.startParameter.taskNames.contains("build")) {
    println("Building: " + buildType)
    delete version_file
    delete last_file_name
    delete last_file_path
}

String spongeForgeVersion = '1.12.2-2838-7.1.11-RC4007'
String forgeVersion = '1.12.2-14.23.5.2847'

version = "1.12.2-GAMMA-1.8.1" + "-" + GetCommitCount()
group = "com.github.terminatornl"
archivesBaseName = "Tiquality-"+ (isObfuscated ? "" : "DEOBF-") + buildType

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"


    options.fork = true
    options.forkOptions.executable = 'javac'
    options.compilerArgs << "-XDignore.symbol.file"
}

minecraft {
    version = forgeVersion
    runDir = "run"
    mappings = "snapshot_20180808"
    replaceIn "Tiquality.java"
    replace '${version}', buildType + "-" + project.version
    replaceIn "mixinhelper/MixinConfigPlugin.java"
    replace '${spongeforge_version}', spongeForgeVersion
    replaceIn "mixinhelper/MixinConfigPlugin.java"
    replace '${forge_version}', forgeVersion
}

configurations {
    embed
    compile.extendsFrom(embed)
    compileOnly.transitive = false
}

dependencies {
    /*
        Sponge
     */
    compile ('org.spongepowered:spongeforge:' + spongeForgeVersion + ':dev'){
        transitive = true
    }


    compileOnly 'com.griefdefender:api:2.1.0-SNAPSHOT'
    compileOnly "net.kyori:event-api:3.0.0"
    compileOnly "net.kyori:event-method:3.0.0"
    compileOnly "net.kyori:event-method-asm:3.0.0"

    if(isFat) {
        embed('org.spongepowered:mixin:0.8-SNAPSHOT') {
            ['gson','guava','commons-io','launchwrapper'].each {
                exclude module: it
            }
        }
    }else{
        compile ('org.spongepowered:mixin:0.8-SNAPSHOT'){
            ['gson','guava','commons-io'].each {
                exclude module: it
            }
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", buildType + "-" + project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include 'mixins.tiquality.json'
        expand 'version':buildType + "-" + project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info or mixins.tiquality.json
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'mixins.tiquality.json'
    }

}

sourceSets.main.refMap = "mixins.tiquality.refmap.json"

jar {
    from (configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }){
        /* Embedded mixin */
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
        rename 'LICENSE.txt', 'LICENSE-mixin.txt'
    }

    from ('LICENSE')
    manifest.attributes(
            'FMLCorePluginContainsFMLMod': 'true',
            'ForceLoadAsMod': 'true',
            'MixinConfigs': 'mixins.tiquality.json',
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'TweakOrder': '0',

    )
}

/* Convienience script to quickly install Tiquality in an obfuscated environment. */

build.doLast {
    new File(projectDir, version_file).text = version
    new File(projectDir, last_file_name).text = jar.archiveName
    new File(projectDir, last_file_path).text = jar.archivePath

    if(installIntoServer) {
        delete fileTree('run_server/mods') {
            include 'Tiquality*'
        }
        copy {
            from jar.archivePath
            into "run_server/mods"
        }
        println("Replaced Tiquality in 'run_server/mods'")
    }
}